######################################
#  Igor's Quest
#  Copyright © 2020 Garry Francis
######################################
loading_screen = title_screen
start_at = room01
start_theme = my_theme
treasure_room = room31

######################################
#  Game Information
######################################
game_information {
   copyright_message = Copyright © 2020 Garry Francis
   game_name = Igor's Quest
   game_version = 1.0.0
   short_synopsis = Help Igor find the body parts for Frankenstein's monster.
   uuid = 1d8cfa68-4987-46d6-988c-33a84bb6c90b
   written_by = Garry Francis
   year_of_original = 2020
   year_of_release = 2020
}

######################################
#  Booleans
######################################
booleans {
   has_all_treasures : boolean "false";
   has_bought_rulers : boolean "false";
   has_fed_dog : boolean "false";
   is_bag_full : boolean "false";
   is_door_open : boolean "false";
   is_end_game : boolean "false";
   is_gate_open : boolean "false";
   is_refresh : boolean "false";
}

######################################
#  Integers
######################################
integers {
   treasure_dropped : integer "0";
   treasure_found : integer "0";
   tune : integer "0";
   tune_broken : integer "0";
   turns : integer "0";
   inventory_max : integer_const "5";
   worn_max : integer_const "1";
}

######################################
#  Strings
######################################
strings {
   dog_name : string "vicious dog";
   door_name : string "closed door";
   gate_name : string "closed gate";
   message : string "";
   table_name : string "wooden table";
   treasure_score : dynamic_string {(treasure_found * 5 + treasure_deposited() * 5 + "/" + treasure_total() * 10)}
}

######################################
#  Game Settings
######################################
game_settings {
   exit_list_calculation = basic
   inventory_items_limit_var = inventory_max
   inventory_worn_items_limit_var = worn_max
   rewind_enabled = true
   rollback_enabled = true
   treasure_hunt_mode = bespoke
}

######################################
#  Locations
######################################
locations {
   room01 : location "Living Room";
   room02 : location "Study";
   room03 : location "Parlour";
   room04 : location "Bridge";
   room05 : location "Inner Courtyard";
   room06 : location "Chapel";
   room07 : location "Outer Courtyard";
   room08 : location "Garden";
   room09 : location "Stable";
   room10 : location "Garden Shed";
   room11 : location "Driveway";
   room12 : location "Road";
   room13 : location "Field";
   room14 : location "Road";
   room15 : location "Village Outskirts";
   room16 : location "Roadside Stall";
   room17 : location "Road";
   room18 : location "Stationery Store";
   room19 : location "Haberdashery";
   room20 : location "Town Square";
   room21 : location "Road";
   room22 : location "Gym";
   room23 : location "Camping Store";
   room24 : location "Car Wash";
   room25 : location "Road";
   room26 : location "Dry Cleaner";
   room27 : location "Railway Station";
   room28 : location "Aquarium";
   room29 : location "Fish Tank";
   room30 : location "Road";
   room31 : location "Laboratory";
}

######################################
#  Connections
######################################
connections {
   from, direction, to = [
      room01, north_oneway, room04,
      room01, east_oneway, room02,
      room01, west_oneway, room03,
      room01, up_oneway, room31, 

      room02, west_oneway, room01,

      room03, east_oneway, room01,

      room04, north_oneway, room05,
      room04, south_oneway, room01,

      room05, north_oneway, room07,
      room05, south_oneway, room04,
      room05, east_oneway, room06,
      room05, west_oneway, room11,

      room06, west_oneway, room05,

      room07, north_oneway, room10,
      room07, south_oneway, room05,
      room07, east_oneway, room08,
      room07, west_oneway, room09,

      room08, west_oneway, room07,

      room09, east_oneway, room07,

      room10, south_oneway, room07,

      room11, east_oneway, room05,
      room11, west_oneway, room12,

      room12, north_oneway, room13,
      room12, south_oneway, room14,
      room12, east_oneway, room11,

      room13, south_oneway, room12,

      room14, north_oneway, room12,
      room14, south_oneway, room15,

      room15, north_oneway, room14,
      room15, south_oneway, room17,
      room15, west_oneway, room16,

      room16, east_oneway, room15,

      room17, north_oneway, room15,
      room17, south_oneway, room20,
      room17, east_oneway, room19,
      room17, west_oneway, room18,

      room18, east_oneway, room17,

      room19, west_oneway, room17,

      room20, north_oneway, room17,
      room20, south_oneway, room30,
      room20, east_oneway, room25,
      room20, west_oneway, room21,

      room21, north_oneway, room22,
      room21, south_oneway, room24,
      room21, east_oneway, room20,
      room21, west_oneway, room23,

      room22, south_oneway, room21,

      room23, east_oneway, room21,

      room24, north_oneway, room21,

      room25, north_oneway, room26,
      room25, south_oneway, room28,
      room25, east_oneway, room27,
      room25, west_oneway, room20,

      room26, south_oneway, room25,

      room27, west_oneway, room25,

      room28, north_oneway, room25,

      room29, up_oneway, room28,

      room30, north_oneway, room20,

      room31, down_oneway, room01,
   ]
}

######################################
#  Barriers
######################################
barriers {
   block_door_north : block_path {
      from                   = room01
      to                     = room04
      message                = Bonk!
      block_when_not         = is_door_open
   }
   block_door_south : block_path {
      from                   = room04
      to                     = room01
      message                = Bonk!
      block_when_not         = is_door_open
   }
   block_gate_west : block_path {
      from                   = room05
      to                     = room11
      message                = Bonk!
      block_when_not         = is_gate_open
   }
   block_gate_east : block_path {
      from                   = room11
      to                     = room05
      message                = Bonk!
      block_when_not         = is_gate_open
   }
   block_lab_down : block_path {
      from                   = room31
      to                     = room01
      message                = Call Frankenstein.
      block_when             = is_end_game
      show_blocked_exit      = true
   }
}

######################################
#  Objects
######################################
objects {
   // Room 1: Living Room
   room : scenery "living room" start_at = "room01" conspicuous = "false";
   door : scenery "{door_name}" start_at = "room01";
   table : scenery "{table_name}" start_at = "room01";
   legs : object "<l<12>><e<14>><g<12>><s<14>>" treasure = "true";

   // Room 2: Study
   study : scenery "study" start_at = "room02" conspicuous = "false";
   frankenstein : scenery "Doctor Frankenstein" start_at = "room02";
   bell : scenery "bell" start_at = "room02";
   rope : scenery "rope" start_at = "room02";

   // Room 3: Parlour
   parlour : scenery "parlour" start_at = "room03" conspicuous = "false";
   clock : scenery "grandfather clock" start_at = "room03";
   hands : object "<h<12>><a<14>><n<12>><d<14>><s<12>>" treasure = "true";
   piano : scenery "piano" start_at = "room03";
   keys : scenery "keys" start_at = "room03" conspicuous = "false";
   key : object "key";

   // Room 4: Bridge
   bridge : scenery "bridge" start_at = "room04" conspicuous = "false";
   moat : scenery "moat" start_at = "room04";

   // Room 5: Inner Courtyard
   courtyard : scenery "courtyard" start_at = "room05" conspicuous = "false";
   gate : scenery "{gate_name}" start_at = "room05";
   chapel : scenery "chapel" start_at = "room05";

   // Room 6: Chapel
   chapel_06 : scenery "chapel" start_at = "room06" conspicuous = "false";
   crucifix : scenery "crucifix" start_at = "room06";

   // Room 7: Outer Courtyard
   dog : scenery "{dog_name}" start_at = "room07";
   shed : scenery "garden shed" start_at = "room07";
   stable : scenery "stable" start_at = "room07";
   garden : scenery "garden" start_at = "room07";

   // Room 8: Garden
   garden_08 : scenery "garden" start_at = "room08" conspicuous = "false";
   carrot : object "carrot";

   // Room 9: Stable
   stable_09 : scenery "stable" start_at = "room09" conspicuous = "false";
   hay : scenery "hay" start_at = "room09";
   horse : scenery "horse" start_at = "room09";

   // Room 10: Garden Shed
   shed_10 : scenery "garden shed" start_at = "room10" conspicuous = "false";
   spade : object "spade" start_at = "room10";
   saw : object "saw" start_at = "room10";

   // Room 11: Driveway
   driveway : scenery "driveway" start_at = "room11" conspicuous = "false";
   crest : scenery "family crest";
   arms : object "<a<12>><r<14>><m<12>><s<14>>" treasure = "true";

   // Room 12: Road 1
   road : scenery "road" start_at = "room12" conspicuous = "false";
   sign : scenery "sign" start_at = "room12";

   // Room 13: Field
   field : scenery "field" start_at = "room13" conspicuous = "false";
   burrow : scenery "burrow" start_at = "room13";
   rabbit : scenery "rabbit";
   hare : scenery "hare";
   hair : object "<h<12>><a<14>><i<12>><r<14>>" treasure = "true";

   // Room 14: Road 2

   // Room 15: Village Outskirts
   outskirts : scenery "village outskirts" start_at = "room15" conspicuous = "false";
   stall : scenery "roadside stall" start_at = "room15";

   // Room 16: Roadside Stall
   stall_16 : scenery "roadside stall" start_at = "room16" conspicuous = "false";
   apple : object "apple" start_at = "room16";
   peas : object "peas" start_at = "room16";
   corn : object "corn" start_at = "room16";
   ears : object "<e<12>><a<14>><r<12>><s<14>>" treasure = "true";

   // Room 17: Road 3
   stationery_store : scenery "stationery store" start_at = "room17";
   haberdashery : scenery "haberdashery" start_at = "room17";

   // Room 18: Stationery Store
   stationery_store_18 : scenery "stationery store" start_at = "room18" conspicuous = "false";
   attendant : scenery "attendant" start_at = "room18";
   counter : scenery "counter" start_at = "room18";
   pen : object "pen" start_at = "room18";
   pencil : object "pencil" start_at = "room18";
   rulers : object "rulers" start_at = "room18";
   feet : object "<f<12>><e<14>><e<12>><t<14>>" treasure = "true";

   // Room 19: Haberdashery
   haberdashery_19 : scenery "haberdashery" start_at = "room19" conspicuous = "false";
   cloth : object "cloth" start_at = "room19";
   cotton : object "cotton" start_at = "room19";
   needles : object "needles" start_at = "room19";
   pins : object "pins";
   eyes : object "<e<12>><y<14>><e<12>><s<14>>" treasure = "true";

   // Room 20: Town Square
   town_square : scenery "town square" conspicuous = "false";

   // Room 21: Road 4
   gym : scenery "gym" start_at = "room21";
   wash : scenery "car wash" start_at = "room21";
   camping_store : scenery "camping store" start_at = "room21";

   // Room 22: Gym
   gym_22 : scenery "gym" start_at = "room22" conspicuous = "false";
   body_builder : scenery "body builder" start_at = "room22";
   bar_bell : scenery "bar bell" start_at = "room22";
   dumb_bell : scenery "dumb bell" start_at = "room22";
   kettle_bell : scenery "kettle bell" start_at = "room22";
   medicine_ball : scenery "medicine ball" start_at = "room22";
   builder : scenery "builder";
   body : object "<b<12>><o<14>><d<12>><y<14>>" treasure = "true";

   // Room 23: Camping Store
   camping_store_23 : scenery "camping store" start_at = "room23" conspicuous = "false";
   sleeping_bag : scenery "sleeping bag" start_at = "room23";
   bag : object "bag";

   // Room 24: Car Wash
   wash_24 : scenery "car wash" start_at = "room24" conspicuous = "false";
   wetsuit : object "wetsuit" wearable = "true";

   // Room 25: Road 5
   cleaner : scenery "dry cleaner" start_at = "room25";
   station : scenery "railway station" start_at = "room25";
   aquarium : scenery "aquarium" start_at = "room25";

   // Room 26: Dry Cleaner
   cleaner_26 : scenery "dry cleaner" start_at = "room26" conspicuous = "false";
   racks : scenery "racks" start_at = "room26";
   suit : object "suit" wearable = "true";

   // Room 27: Railway Station
   station_27 : scenery "railway station" start_at = "room27" conspicuous = "false";
   receipt : object "receipt" start_at = "room27";

   // Room 28: Aquarium
   aquarium_28 : scenery "aquarium" start_at = "room28" conspicuous = "false";
   tank : scenery "fish tank" start_at = "room28";

   // Room 29: Fish Tank
   tank_29 : scenery "fish tank" start_at = "room29" conspicuous = "false";
   fish : scenery "fish" start_at = "room29";
   shark : scenery "shark" start_at = "room29";
   hammer : object "hammer";
   head : object "<h<12>><e<14>><a<12>><d<14>>" treasure = "true";

   // Room 30: Road 6
   house : scenery "mayor's house" start_at = "room30";
   front_door : scenery "front door" start_at = "room30";
   mat : scenery "mat" start_at = "room30";
   meat : object "meat";

   // Room 31: Laboratory
   laboratory : scenery "laboratory" start_at = "room31" conspicuous = "false";
   machinery : scenery "machinery" start_at = "room31";
   bench : scenery "bench" start_at = "room31";
}

######################################
#  On Startup
######################################
on_startup {
   : print "Doctor Frankenstein comes running down the stairs puffing and panting.";
   : print "<\"Igor, I've done it ... machine ready ... thunderstorm due tonight ... need fresh body parts: head, hair, eyes, ears, body, arms, hands, legs, feet.\"<#99f>>";
   : print "He stops for breath before continuing, <\"You know what to do ... bring parts to lab ... pronto!\"<#99f>>";
   : print "[[Press any key]]";
   : press_any_key;
}

######################################
#  On Command
######################################
on_command {
   // Checks for diagonal movement
   : match "ne _;nw _;se _;sw _" {
      : print "No diagonal.";
      : done;
   }
   // Self
   : match "examine me" {
      : print "Me Igor.";
      : done;
   }
   : match "get me" {
      : print "That silly.";
      : done;
   }

   // Room 1: Living Room
   : match "examine room" {
      : if (is_at "room01") {
         : if (original_noun1() == "living") {
            : print "Not dead.";
            : done;
         }
         : print "For living.";
         : done;
      }
   }
   // Door (floating object in room01 & 04)
   : match "examine door" {
      : if (is_present "door") {
         : if (is_at "room01") {
            : print "To north.";
         }
         : else {
            : print "To south.";
         }
         : done;
      }
   }
   : match "close door" {
      : if (is_present "door") {
         : if (!is_door_open) {
            : print "Already closed.";
            : done;
         }
         : set_false "is_door_open";
         : set_string var = "door_name" text = "closed door";
         : set_string var = "message" text = "Igor close.";
         : gosub "refresh";
      }
   }
   : match "enter door" {
      : if (is_at "room01") {
         : if (is_door_open) {
            : goto "room04";
            : redescribe;
         }
         : print "Bonk!";
         : failure;
         : done;
      }
      : if (is_at "room04") {
         : if (is_door_open) {
            : goto "room01";
            : redescribe;
         }
         : print "Bonk!";
         : failure;
         : done;
      }
   }
   : match "lock door" {
      : if (is_present "door") {
         : if (is_door_open) {
            : print "Close first.";
            : done;
         }
         : print "No lock.";
         : done;
      }
   }
   : match "open door" {
      : if (is_present "door") {
         : if (is_door_open) {
            : print "Already open.";
            : done;
         }
         : set_true "is_door_open";
         : set_string var = "door_name" text = "open door";
         : set_string var = "message" text = "Igor open.";
         : gosub "refresh";
         : done;
      }
   }
   : match "unlock door" {
      : if (is_present "door") {
         : print "Not locked.";
         : done;
      }
   }
   // Table
   : match "examine table" {
      : if (is_present "table") {
         : if (has_not_created "legs") {
            : print "Four legs.";
            : done;
         }
         : print "Two legs.";
         : done;
      }
   }
   : match "saw table" {
      : if (is_present "table") {
         : if (!is_carried "saw") {
            : print "No saw.";
            : done;
         }
         : print "Too big.";
         : done;
      }
   }
   // Legs (treasure)
   : match "examine legs" {
      : if (is_present "legs") {
         : print "Two legs.";
         : done;
      }
      : if (is_present "table") {
         : if (has_not_created "legs") {
            : print "Wooden legs.";
            : done;
         }
         : print "Two missing.";
         : done;
      }
   }
   : match "break legs" {
      : if (is_present "table" && has_not_created "legs") {
         : print "Strong wood.";
         : done;
      }
   }
   : match "chop legs" {
      : if (is_present "table" && has_not_created "legs") {
         : print "No axe.";
         : done;
      }
   }
   : match "cut legs" {
      : if (is_present "table" && has_not_created "legs") {
         : print "No knife.";
         : done;
      }
   }
   : match "get legs" {
      : if (is_present "table" && has_not_created "legs") {
         : print "Belong table.";
         : done;
      }
   }
   : match "give legs;show legs" {
      : if (is_present "frankenstein") {
         : print "\"Take upstairs.\".";
         : done;
      }
   }
   : match "saw legs" {
      : if (is_present "table") {
         : if (!is_carried "saw") {
            : print "Sore legs?";
            : done;
         }
         : if (has_not_created "legs") {
            : create "legs";
            : set_string var = "table_name" text = "broken table";
            : increment "treasure_found";
            : success;
            : set_string var = "message" text = "Table collapses.";
            : gosub "refresh";
         }
         : print "Saw blunt.";
         : done;
      }
   }

   // Room 2: Study
   : match "examine study" {
      : if (is_at "room02") {
         : print "Frankenstein's room.";
         : done;
      }
   }
   // Bell
   : match "examine bell" {
      : if (is_present "bell") {
         : print "Rope attached.";
         : done;
      }
   }
   : match "hit bell;ring bell" {
      : if (is_present "bell") {
         : print "Use rope.";
         : done;
      }
   }
   // Frankenstein
   : match "examine frankenstein" {
      : if (is_present "frankenstein") {
         : print "Looks excited.";
         : done;
      }
   }
   : match "ask frankenstein" {
      : if (is_present "frankenstein") {
         : print "\"Not now.\"";
         : done;
      }
   }
   : match "pat frankenstein" {
      : if (is_present "frankenstein") {
         : print "\"Go away.\"";
         : done;
      }
   }
   : match "talk frankenstein" {
      : if (is_present "frankenstein") {
         : print "\"Got everything?\"";
         : done;
      }
   }
   // Rope (floating object in room02 & 31)
   : match "examine rope" {
      : if (is_at "room02") {
         : print "Leads upstairs.";
         : done;
      }
      : if (is_at "room31") {
         : print "Leads downstairs.";
         : done;
      }
   }
   : match "get rope" {
      : if (is_present "rope") {
         : print "Rope attached.";
         : done;
      }
   }
   : match "pull rope" {
      : if (is_at "room02") {
         : print "Try upstairs.";
         : done;
      }
      : if (is_at "room31") {
         : if (is_end_game) {
            : print "Bell rings.";
            : print "[[Press any key]]";
            : press_any_key;
            : clear_screen;
            : print "Frankenstein comes running up the stairs to examine your booty and his face drops.\n<\"Igor, you idiot ... these aren't body parts ... how am I going to make a monster out of this rubbish? I should chop you up and use YOUR body parts!\"\n\"Sorry, master.\"<#99f>>";
            : win_game;
         }
         : print "Not yet.";
         : done;
      }
   }
   : match "use rope" {
      : if (is_present "rope") {
         : print "Try PULL.";
         : done;
      }
   }

   // Room 3: Parlour
   : match "examine parlour" {
      : if (is_at "room03") {
         : print "For relaxing.";
         : done;
      }
   }
   : match "listen -" {
      : if (is_at "room03") {
         : print "Tick, tock.";
         : done;
      }
   }
   // Clock
   : match "examine clock" {
      : if (is_present "clock") {
         : if (has_not_created "hands") {
            : print "Two hands.";
            : done;
         }
         : print "Hands missing.";
         : done;
      }
   }
   : match "examine grandfather" {
      : if (is_present "clock") {
         : print "Misses grandmother.";
         : done;
      }
   }
   : match "repair clock" {
      : if (is_present "clock" && !has_not_created "hands") {
         : print "Can't fix.";
         : done;
      }
   }
   // Hand (singular), hour hand, minute hand
   : match "examine hand" {
      : if (is_present "clock" && has_not_created "hands") {
         : print "Which one?";
         : done;
      }
   }
   : match "examine hour" {
      : if ((is_present "clock" && has_not_created "hands") || is_present "hands") {
         : print "Little hand.";
         : done;
      }
   }
   : match "examine minute" {
      : if ((is_present "clock" && has_not_created "hands") || is_present "hands") {
         : print "Big hand.";
         : done;
      }
   }
   : match "get hand;get hour;get minute" {
      : if ((is_present "clock" && has_not_created "hands") || is_beside "hands") {
         : print "Need both.";
         : done;
      }
   }
   // Hands (plural) (treasure)
   : match "examine hands" {
      : if (is_present "clock" && has_not_created "hands") {
         : print "Hour, minute.";
         : done;
      }
      : if (is_present "hands") {
         : print "Two hands.";
         : done;
      }
   }
   : match "get hands"  {
      : if (is_present "clock" && has_not_created "hands") {
         : if (carried() < carry_limit()) {
            : pocket "hands";
            : increment "treasure_found";
            : success;
            : print "Igor take.";
            : done;
         }
         : print "Hands full.";
         : done;
      }
   }
   : match "give hands;show hands" {
      : if (is_present "frankenstein") {
         : print "\"Take upstairs.\".";
         : done;
      }
   }
   : match "insert hands" {
      : if (is_present "clock" && is_carried "hands") {
         : print "Can't fix.";
         : done;
      }
   }
   // Piano
   : match "examine piano" {
      : if (is_present "piano") {
         : print "Ivory keys.";
         : done;
      }
   }
   : match "play piano" {
      : if (is_present "piano") {
         : if (has_not_created "key") {
            : if (tune == 0) {
               : if (sysvar_bool "sysvar_sound_enabled") {
                  : gosub "play_macdonald";
               }
               : else {
                  : print "[[Plays 'Old MacDonald had a Farm']]";
               }
               : print "Play another.";
            }
            : else_if (tune == 1) {
               : if (sysvar_bool "sysvar_sound_enabled") {
                  : gosub "play_sheep";
               }
               : else {
                  : print "[[Plays 'Baa, Baa, Black Sheep']]";
               }
               : print "One more.";
            }
            : else_if (tune == 2) {
               : if (sysvar_bool "sysvar_sound_enabled") {
                  : gosub "play_mary";
               }
               : else {
                  : print "[[Plays 'Mary had a Little Lamb']]";
               }
               : print "That's enough.";
            }
            : increment "tune";
            : if (tune == 3) {
               : set_integer var = "tune" value = "0";
            }
         }
         : else {
            : if (tune_broken == 0) {
               : if (sysvar_bool "sysvar_sound_enabled") {
                  : gosub "play_macdonald_broken";
               }
               : else {
                  : print "[[Plays 'Old MacDonald had a Farm']]";
               }
            }
            : else_if (tune_broken == 1) {
               : if (sysvar_bool "sysvar_sound_enabled") {
                  : gosub "play_sheep_broken";
               }
               : else {
                  : print "[[Plays 'Baa, Baa, Black Sheep']]";
               }
            }
            : else_if (tune_broken == 2) {
               : if (sysvar_bool "sysvar_sound_enabled") {
                  : gosub "play_mary_broken";
               }
               : else {
                  : print "[[Plays 'Mary had a Little Lamb']]";
               }
            }            
            : increment "tune_broken";
            : if (tune_broken == 3) {
               : set_integer var = "tune_broken" value = "0";
            }
            : print "E missing.";
         }
         : done;
      }
   }
   : match "repair piano" {
      : if (is_present "piano" && is_carried "key") {
         : print "Can't fix.";
         : done;
      }
   }
   // Keys (plural)
   : match "examine keys" {
      : if (is_present "keys") {
         : if (has_not_created "key") {
            : print "Key loose.";
            : done;
         }
         : print "Key missing.";
         : done;
      }
   }
   // Key (singular)
   : match "examine key" {
      : if (is_present "key") {
         : print "Oblong key.";
         : done;
      }
      : if (is_present "keys") {
         : print "Many keys.";
         : done;
      }
   }
   : match "get key" {
      : if (is_present "keys") {
         : if (has_not_created "key") {
            : if (carried() < carry_limit()) {
               : pocket "key";
               : print "Igor take.";
               : done;
            }
            : print "Hands full.";
            : done;
         }
         : if (!is_present "key") {
            : print "None loose.";
            : done;
         }
      }
   }
   : match "insert key" {
      : if (is_carried "key") {
         : if (is_present "piano") {
            : print "Can't fix.";
            : done;
         }
         : if (is_present "mat") {
            : swap o1 = "mat" o2 = "meat";
            : destroy "key";
            : set_string var = "message" text = "Fits hole.";
            : gosub "refresh";
         }
      }
   }
   
   // Room 4: Bridge
   : match "examine bridge" {
      : if (is_at "room04") {
         : print "Crosses moat.";
         : done;
      }
   }
   // Moat
   : match "examine moat" {
      : if (is_present "moat") {
         : print "Very deep.";
         : done;
      }
   }
   : match "d _;jump -;jump moat;enter moat" {
      : if (is_present "moat") {
         : print "Igor dead.";
         : end_game;
      }
   }

   // Room 5: Inner Courtyard
   // Courtyard (floating object in room05 & 07)
   : match "examine courtyard" {
      : if (is_present "courtyard") {
         : print "Walled in.";
         : done;
      }
   }
   // Chapel
   : match "examine chapel" {
      : if (is_present "chapel") {
         : print "To east.";
         : done;
      }
   }
   : match "enter chapel" {
      : if (is_present "chapel") {
         : goto "room06";
         : redescribe;
      }
   }
   // Gate (floating object in room05 & 11)
   : match "examine gate" {
      : if (is_present "gate") {
         : if (is_at "room05") {
            : print "To west.";
            : done;
         }
         : if (is_gate_open) {
            : print "Should close.";
            : done;
         }
         : print "To east.";
         : done;
      }
   }
   : match "close gate" {
      : if (is_present "gate") {
         : if (!is_gate_open) {
            : print "Already closed.";
            : done;
         }
         : set_false "is_gate_open";
         : set_string var = "gate_name" text = "closed gate";
         : create "crest" target = "room11";
         : if (is_at "room11") {
            : set_string var = "message" text = "See something.";
         }
         : else {
            : set_string var = "message" text = "Igor close.";
         }
         : gosub "refresh";
      }
   }
   : match "enter gate" {
      : if (is_at "room05") {
         : if (is_gate_open) {
            : goto "room11";
            : redescribe;
         }
         : print "Bonk!";
         : failure;
         : done;
      }
      : if (is_at "room11") {
         : if (is_gate_open) {
            : goto "room05";
            : redescribe;
         }
         : print "Bonk!";
         : failure;
         : done;
      }
   }
   : match "lock gate" {
      : if (is_present "gate") {
         : if (is_gate_open) {
            : print "Close first.";
            : done;
         }
         : print "No lock.";
         : done;
      }
   }
   : match "open gate" {
      : if (is_present "gate") {
         : if (is_gate_open) {
            : print "Already open.";
            : done;
         }
         : set_true "is_gate_open";
         : set_string var = "gate_name" text = "open gate";
         : destroy "crest";
         : set_string var = "message" text = "Igor open.";
         : gosub "refresh";
      }
   }
   : match "unlock gate" {
      : if (is_present "gate") {
         : print "Not locked.";
         : done;
      }
   }

   // Room 6: Chapel
   : match "examine chapel" {
      : if (is_present "chapel_06") {
         : print "God's house.";
         : done;
      }
   }
   : match "exit _" {
      : if (is_at "room06") {
         : goto "room05";
         : redescribe;
      }
   }
   // Crucifix
   : match "examine crucifix" {
      : if (is_present "crucifix") {
         : print "Large cross.";
         : done;
      }
   }
   : match "get crucifix" {
      : if (is_present "crucifix") {
         : print "Screwed on.";
         : done;
      }
   }

   // Room 7: Outer Courtyard
   // See room05 for courtyard
   // Dog
   : match "examine dog" {
      : if (is_present "dog") {
         : if (has_fed_dog) {
            : print "Looks happy.";
            : done;
         }
         : print "Looks mean.";
         : done;
      }
   }
   : match "feed dog" {
      : if (is_present "dog") {
         : if (is_carried "meat") {
            : destroy "meat";
            : set_true "has_fed_dog";
            : set_string var = "dog_name" text = "friendly dog";
            : set_string var = "message" text = "Grabs meat.";
            : gosub "refresh";
         }
         : if (has_fed_dog) {
            : print "Already fed.";
            : done;
         }
         : print "No food.";
         : done;
      }
   }
   : match "get dog" {
      : if (is_present "dog") {
         : if (has_fed_dog) {
            : print "Runs away.";
            : done;
         }
         : print "Dog bites.";
         : done;
      }
   }
   : match "hit dog;kick dog" {
      : if (is_present "dog") {
         : if (has_fed_dog) {
            : print "Animal cruelty!";
            : done;
         }
         : print "Dog bites.";
         : done;
      }
   }
   : match "kiss dog" {
      : if (is_present "dog") {
         : if (has_fed_dog) {
            : print "Slobbery kiss.";
            : done;
         }
         : print "You crazy?";
         : done;
      }
   }
   : match "pat dog;talk dog" {
      : if (is_present "dog") {
         : if (has_fed_dog) {
            : print "Wags tail.";
            : done;
         }
         : print "\"Grrrr!\"";
         : done;
      }
   }
   : match "smell dog" {
      : if (is_present "dog") {
         : print "Bad breath.";
         : done;
      }
   }
   // Garden
   : match "examine garden" {
      : if (is_present "garden") {
         : print "To east.";
         : done;
      }
   }
   : match "enter garden" {
      : if (is_present "garden") {
         : goto "room08";
         : redescribe;
      }
   }
   // Shed
   : match "examine shed" {
      : if (is_present "shed") {
         : print "To north.";
         : done;
      }
   }
   : match "n _;enter shed" {
      : if (is_present "shed") {
         : if (has_fed_dog) {
            : goto "room10";
            : redescribe;
         }
         : print "Dog growls.";
         : failure;
         : done;
      }
   }
   // Stable
   : match "examine stable" {
      : if (is_present "stable") {
         : print "To west.";
         : done;
      }
   }
   : match "enter stable" {
      : if (is_present "stable") {
         : goto "room09";
         : redescribe;
      }
   }

   // Room 8: Garden
   : match "examine garden" {
      : if (is_at "room08") {
         : print "Vegetable patch.";
         : done;
      }
   }
   : match "examine patch" {
      : if (is_at "room08") {
         : print "Mainly dirt.";
         : done;
      }
   }
   : match "exit _" {
      : if (is_at "room08") {
         : goto "room07";
         : redescribe;
      }
   }
   : match "dig -;dig garden;dig patch" {
      : if (!is_carried "spade") {
         : print "Need shovel.";
         : done;
      }
      : if (is_at "room08") {
         : if (has_not_created "carrot") {
            : create "carrot";
            : set_string var = "message" text = "Find something.";
            : gosub "refresh";
         }
         : print "Only dirt.";
         : done;
      }
   }
   // Carrot
   : match "examine carrot" {
      : if (is_present "carrot") {
         : print "Rabbit food.";
         : done;
      }
   }
   : match "drop carrot;give carrot" {
      : if (is_present "burrow" && has_not_created "rabbit" && is_carried "carrot") {
         : destroy "carrot";
         : create "rabbit";
         : set_string var = "message" text = "Rabbit appears.";
         : gosub "refresh";
      }
   }
   : match "eat carrot" {
      : if (is_present "carrot") {
         : print "Not hungry.";
         : done;
      }
   }
   : match "give carrot" {
      : if (is_present "horse" && is_carried "carrot") {
         : print "Prefer apple.";
         : done;
      }
   }

   // Room 9: Stable
   : match "examine stable" {
      : if (is_at "room09") {
         : print "Mare's house.";
         : done;
      }
   }
   : match "exit _" {
      : if (is_at "room09") {
         : goto "room07";
         : redescribe;
      }
   }
   : match "listen -" {
      : if (is_at "room09") {
         : print "Hoarse breathing.";
         : done;
      }
   }
   // Hay
   : match "examine hay" {
      : if (is_present "hay") {
         : print "Hey, hey!";
         : done;
      }
   }
   : match "search hay" {
      : if (is_present "hay") {
         : print "No needle.";
         : done;
      }
   }
   : match "smell hay" {
      : if (is_present "hay") {
         : print "\"Achooo!\"";
         : done;
      }
   }
   // Horse
   : match "examine horse" {
      : if (is_present "horse") {
         : if (original_noun1() == "horse") {
            : print "See mare.";
            : done;
         }
         : print "Female horse.";
         : done;
      }
   }
   : match "ride horse;sit horse" {
      : if (is_present "horse") {
         : print "No saddle.";
         : done;
      }
   }
   : match "pat horse" {
      : if (is_present "horse") {
         : print "She neighs.";
         : done;
      }
   }
   : match "hit horse" {
      : if (is_present "horse") {
         : print "That's cruel.";
         : done;
      }
   }
   : match "smell horse" {
      : if (is_present "horse") {
         : print "Smell horsey.";
         : done;
      }
   }
   : match "talk horse" {
      : if (is_present "horse") {
         : print "She snorts.";
         : done;
      }
   }
   : match "feed horse" {
      : if (is_present "horse") {
         : if (is_carried "apple") {
            : destroy "apple";
            : print "Give apple.";
            : done;
         }
         : if (is_carried "carrot" || is_carried "corn" || is_carried "meat") {
            : print "Prefer apple.";
            : done;
         }
         : print "No food.";
         : done;
      }
   }

   // Room 10: Garden Shed
   : match "examine shed" {
      : if (is_at "room10") {
         : print "Tool house.";
         : done;
      }
   }
   : match "exit _" {
      : if (is_at "room10") {
         : goto "room07";
         : redescribe;
      }
   }
   // Saw
   : match "examine saw" {
      : if (is_present "saw") {
         : print "See saw.";
         : done;
      }
   }
   // Spade
   : match "examine spade" {
      : if (is_present "spade") {
         : print "Little shovel.";
         : done;
      }
   }

   // Room 11: Driveway
   // See room 5 for gate
   : match "examine driveway" {
      : if (is_at "room11") {
         : print "Gravel driveway.";
         : done;
      }
   }
   // Crest
   : match "examine crest" {
      : if (is_present "crest") {
         : if (original_noun1() == "family") {
            : print "Frankenstein family.";
            : done;
         }
         : if (has_not_created "arms") {
            : print "Has arms.";
            : done;
         }
         : print "Arms missing.";
         : done;
      }
   }
   : match "get crest" {
      : if (is_present "crest") {
         : print "Bolted on.";
         : done;
      }
   }
   : match "repair crest" {
      : if (is_present "crest" && !has_not_created "arms") {
         : print "Can't fix.";
         : done;
      }
   }
   // Arms (treasure)
   : match "examine arms" {
      : if (is_present "crest" && has_not_created "arms") {
         : print "Look loose.";
         : done;
      }
      : if (is_present "arms") {
         : print "Two arms.";
         : done;
      }
   }
   : match "get arms" {
      : if (is_present "crest" && has_not_created "arms") {
         : if (carried() < carry_limit()) {
            : pocket "arms";
            : increment "treasure_found";
            : success;
            : print "Igor take.";
            : done;
         }
         : print "Hands full.";
         : done;
      }
   }
   : match "give arms;show arms" {
      : if (is_present "frankenstein") {
         : print "\"Take upstairs.\".";
         : done;
      }
   }
   : match "insert arms" {
      : if (is_present "crest" && is_carried "arms") {
         : print "Can't fix.";
         : done;
      }
   }

   // Room 12: Road 1
   // Road (floating object in room12, 14, 17, 21, 25 & 30)
   : match "examine road" {
      : if (is_at "room12" || is_at "room14") {
         : print "Dirt road.";
         : done;
      }
      : if (is_at "room17") {
         : print "Cobblestone road.";
         : done;
      }
      : if (is_at "room21" || is_at "room25" || is_at "room30") {
         : print "Dead end.";
         : done;
      }
   }
   // Sign (floating object in room12 & 26)
   : match "examine sign" {
      : if (is_at "room12") {
         : print "Points south.";
         : done;
      }
      : if (is_at "room26") {
         : print "See writing.";
         : done;
      }
   }
   : match "read sign" {
      : if (is_at "room12") {
         : print "\"<<= VILLAGE\"";
         : done;
      }
      : if (is_at "room26") {
         : print "\"DRIEST CLEANEST\"";
         : done;
      }
   }

   // Room 13: Field
   : match "examine field" {
      : if (is_at "room13") {
         : print "Very grassy.";
         : done;
      }
   }
   // Burrow
   : match "examine burrow" {
      : if (is_present "burrow") {
         : if (has_not_created "rabbit") {
            : print "Rabbit inside.";
            :done;
         }
         : print "No rabbit.";
         : done;
      }
   }
   : match "enter burrow" {
      : if (is_present "burrow") {
         : print "Rabbit sized.";
         : done;
      }
   }
   // Rabbit
   : match "examine rabbit" {
      : if (is_present "burrow" && has_not_created "rabbit") {
            : print "Burrow dark.";
            :done;
         }
      : if (is_present "rabbit") {
         : swap o1 = "rabbit" o2 = "hare";
         : set_string var = "message" text = "Male rabbit.";
         : gosub "refresh";
      }
   }
   : match "feed rabbit" {
      : if (is_present "burrow" && has_not_created "rabbit") {
         : if (is_carried "carrot") {
            : destroy "carrot";
            : create "rabbit";
            : set_string var = "message" text = "Rabbit appears.";
            : gosub "refresh";
         }
         : print "No food.";
         : done;
      }
   }
   : match "get rabbit" {
      : if (is_present "burrow" && has_not_created "rabbit") {
         : print "Can't reach.";
         : done;
      }
      : if (is_present "rabbit") {
         : print "Hops away.";
         : done;
      }
   }
   // Hare 
   : match "examine hare" {
      : if (is_present "hare") {
         : print "Very hairy.";
         : done;
      }
   }
   : match "get hare;get hair" {
      : if (is_present "hare") {
         : if (carried() < carry_limit()) {
            : destroy "hare";
            : pocket "hair";
            : increment "treasure_found";
            : success;
            : set_string var = "message" text = "Ouch!";
            : gosub "refresh";
         }
         : print "Hands full.";
         : done;
      }
   }
   // Hair (treasure)
   : match "examine hair" {
      : if (is_present "hair") {
         : print "Hare's hair.";
         : done;
      }
   }
   : match "give hair;show hair" {
      : if (is_present "frankenstein") {
         : print "\"Take upstairs.\".";
         : done;
      }
   }

   // Room 14: Road 2
   // See room12 for road

   // Room 15: Village Outskirts
   : match "examine outskirts" {
      : if (is_at "room15") {
         : print "Village nearby.";
         : done;
      }
   }
   // Roadside stall
   : match "examine stall" {
      : if (is_present "stall") {
         : print "To west.";
         : done;
      }
   }
   : match "enter stall" {
      : if (is_present "stall") {
         : goto "room16";
         : redescribe;
      }
   }

   // Room 16: Roadside Stall
   : match "examine stall" {
      : if (is_at "room16") {
         : print "Nobody around.";
         : done;
      }
   }
   : match "exit _" {
      : if (is_at "room16") {
         : goto "room15";
         : redescribe;
      }
   }
   // Apple
   : match "examine apple" {
      : if (is_present "apple") {
         : print "Got worm.";
         : done;
      }
   }
   : match "eat apple" {
      : if (is_present "apple") {
         : print "Igor vegetarian.";
         : done;
      }
   }
   : match "give apple" {
      : if (is_present "horse" && is_carried "apple") {
         : destroy "apple";
         : print "Horse like.";
         : done;
      }
   }
   : match "show apple" {
      : if (is_present "horse" && is_carried "apple") {
         : print "Nostrils flare.";
         : done;
      }
   }
   : match "examine worm" {
      : if (is_present "apple") {
         : print "Troll like.";
         : done;
      }
   }
   : match "eat worm" {
      : if (is_present "apple") {
         : print "Yuck!";
         : done;
      }
   }
   : match "get worm" {
      : if (is_present "apple") {
         : print "Too squirmy.";
         : done;
      }
   }
   // Corn
   : match "examine corn" {
      : if (is_present "corn") {
         : print "Two ears.";
         : done;
      }
   }
   : match "eat corn" {
      : if (is_present "corn") {
         : print "Not raw.";
         : done;
      }
   }
   : match "give corn" {
      : if (is_present "horse" && is_carried "corn") {
         : print "Prefer apple.";
         : done;
      }
   }
   : match "smell corn" {
      : if (is_present "corn") {
         : print "Smell corny.";
         : done;
      }
   }
   // Ears (treasure)
   : match "examine ears" {
      : if (is_present "ears") {
         : print "Two ears.";
         : done;
      }
   }
   : match "get ears" {
      : if (is_present "corn") {
         : if (is_carried "corn" || carried() < carry_limit()) {
            : swap o1 = "corn" o2 = "ears";
            : increment "treasure_found";
            : success;
            : if (is_beside "ears") {
               : pocket "ears";
               : set_string var = "message" text = "Igor take.";
               : gosub "refresh";
            }
            : print "Igor take.";
            : done;
         }
         : print "Hands full.";
         : done;
      }
   }
   : match "give ears;show ears" {
      : if (is_present "frankenstein") {
         : print "\"Take upstairs.\".";
         : done;
      }
   }
   // Pea (singular)
   : match "examine pea" {
      : if (is_present "peas") {
         : print "Many pea.";
         : done;
      }
   }
   : match "take pea;take pee" {
      : if (original_verb() == "take") {
         : print "Pee later.";
         : done;
      }
   }
   // Peas (plural)
   : match "examine peas" {
      : if (is_present "peas") {
         : print "20 pea.";
         : done;
      }
   }
   : match "drop peas" {
      : if (is_carried "bag" && is_bag_full) {
         : create "peas";
         : set_false "is_bag_full";
         : set_string var = "message" text = "Bag empty.";
         : gosub "refresh";
      }
   }
   : match "eat peas" {
      : if ((is_carried "bag" && is_bag_full) || is_present "peas") {
         : print "Not raw.";
         : done;
      }
   }
   : match "get peas" {
      : if (is_present "peas") {
         : if (is_carried "bag") {
            : destroy "peas";
            : set_true "is_bag_full";
            : set_string var = "message" text = "Fill bag.";
            : gosub "refresh";
         }
         : print "Need bag.";
         : done;
      }
   }
   : match "give peas;give money" {
      : if (is_carried "bag" && is_bag_full) {
         : if (is_at "room18") {
            : print "Try BUY.";
            : done;
         }
         : print "Nobody interested.";
         : done;
      }
   }

   // Room 17: Road 3
   // See room12 for road
   // Stationery store
   : match "examine stationery;examine store" {
      : if (is_present "stationery_store") {
         : print "To west.";
         : done;
      }
   }
   : match "enter store" {
      : if (is_present "stationery_store") {
         : goto "room18";
         : redescribe;
      }
   }
   // Haberdashery
   : match "examine haberdashery" {
      : if (is_present "haberdashery") {
         : print "To east.";
         : done;
      }
   }
   : match "enter haberdashery" {
      : if (is_present "haberdashery") {
         : goto "room19";
         : redescribe;
      }
   }

   // Room 18: Stationery Store
   : match "examine stationery;examine store" {
      : if (is_at "room18") {
         : print "Not moving.";
         : done;
      }
   }
   : match "exit _" {
      : if (is_at "room18") {
         : goto "room17";
         : redescribe;
      }
   }
   // Attendant (floating object in room18 & 26)
   : match "examine attendant" {
      : if (is_at "room18") {
         : print "Looks attentive.";
         : done;
      }
      : if (is_at "room26") {
         : if (has_not_created "suit") {
            : print "Wants something.";
            : done;
         }
         : else {
            : print "Looks bored.";
            : done;
         }
      }
   }
   : match "ask attendant" {
      : if (is_at "room18") {
         : print "\"Want stationery?\"";
         : done;
      }
      : if (is_at "room26") {
         : if (has_not_created "suit") {
            : print "\"You collecting?\"";
            : done;
         }
         : else {
            : print "\"Anything else?\"";
            : done;
         }
      }
   }
   : match "talk attendant" {
      : if (is_at "room18") {
         : print "\"Sale on.\"";
         : done;
      }
      : if (is_at "room26") {
         : if (has_not_created "suit") {
            : print "\"Got receipt?\"";
            : done;
         }
         : else {
            : print "\"Anything else?\"";
            : done;
         }
      }
   }
   // Counter (floating object in room18 & 26)
   : match "examine counter" {
      : if (is_at "room18" && is_beside "rulers" && has_bought_rulers) {
         : print "Contains rulers.";
         : done;
      }
      : if (is_at "room26" && is_beside "suit") {
         : print "Contains suit.";
         : done;
      }
      : if (is_at "room18" || is_at "room26") {
         : print "For counting?";
         : done;
      }
   }
   // Pen
   : match "examine pen" {
      : if (is_present "pen") {
         : print "For writing.";
         : done;
      }
   }
   : match "buy pen" {
      : if (is_present "pen") {
         : if (is_carried "bag" && is_bag_full) {
            : print "Not enough.";
            : done;
         }
         : print "No money.";
         : done;
      }
   }
   : match "get pen" {
      : if (is_present "pen") {
         : print "\"50p please.\"";
         : done;
      }
   }
   // Pencil
   : match "examine pencil" {
      : if (is_present "pencil") {
         : print "For drawing.";
         : done;
      }
   }
   : match "buy pencil" {
      : if (is_present "pencil") {
         : if (is_carried "bag" && is_bag_full) {
            : print "Not enough.";
            : done;
         }
         : print "No money.";
         : done;
      }
   }
   : match "get pencil" {
      : if (is_present "pencil") {
         : print "\"30p please.\"";
         : done;
      }
   }
   // Ruler (singular)
   : match "examine ruler" {
      : if (is_present "rulers") {
         : print "One foot.";
         : done;
      }
   }
   : match "buy ruler" {
      : if (is_present "rulers") {
         : if (is_carried "bag" && is_bag_full) {
            : print "Need two.";
            : done;
         }
         : print "No money.";
         : done;
      }
   }
   : match "get ruler" {
      : if (is_present "rulers") {
         : print "\"10p please.\"";
         : done;
      }
   }
   // Rulers (plural)
   : match "examine rulers" {
      : if (is_present "rulers") {
         : print "Two feet.";
         : done;
      }
   }
   : match "buy rulers" {
      : if (is_present "rulers") {
         : if (is_carried "bag" && is_bag_full) {
            : set_false "is_bag_full";
            : set_true "has_bought_rulers";
            : print "On counter.";
            : done;
         }
         : print "No money.";
         : done;
      }
   }
   : match "get rulers" {
      : if (is_present "rulers" && !has_bought_rulers) {
         : print "\"20p please.\"";
         : done;
      }
   }
   // Feet (treasure)
   : match "examine feet" {
      : if (is_present "feet") {
         : print "Two feet.";
         : done;
      }
   }
   : match "get feet" {
      : if (is_present "rulers") {
         : if (has_bought_rulers) {
            : if (is_carried "rulers" || carried() < carry_limit()) {
               : swap o1 = "rulers" o2 = "feet";
               : increment "treasure_found";
               : success;
               : if (is_beside "feet") {
                  : pocket "feet";
                  : set_string var = "message" text = "Igor take.";
                  : gosub "refresh";
               }
               : print "Igor take.";
               : done;
            }
            : print "Hands full.";
            : done;
         }
         : print "Buy first.";
         : done;
      }
   }
   : match "give feet;show feet" {
      : if (is_present "frankenstein") {
         : print "\"Take upstairs.\".";
         : done;
      }
   }

   // Room 19: Haberdashery
   : match "examine haberdashery" {
      : if (is_at "room19") {
         : print "Sewing stuff.";
         : done;
      }
   }
   : match "exit _" {
      : if (is_at "room19") {
         : goto "room17";
         : redescribe;
      }
   }
   // Cloth
   : match "examine cloth" {
      : if (is_present "cloth") {
         : print "For clothing.";
         : done;
      }
   }
   : match "sew cloth;sew bag" {
      : if (!is_present "cloth") {
         : print "No cloth.";
         : done;
      }
      : if (!is_present "cotton") {
         : print "No cotton.";
         : done;
      }
      : if (!is_present "needles") {
         : print "No needle.";
         : done;
      }
      : print "Too clumsy.";
      : done;
   }
   // Cotton
   : match "examine cotton" {
      : if (is_present "cotton") {
         : print "For sewing.";
         : done;
      }
   }
   // Needles
   : match "examine needle" {
      : if (is_present "needles") {
         : print "Two needles.";
         : done;
      }
   }
   : match "get needle" {
      : if (is_present "needles") {
         : print "Need both.";
         : done;
      }
   }
   : match "examine needles" {
      : if (is_present "needles") {
         : print "Have eyes.";
         : done;
      }
   }
   // Pins
   : match "examine pin" {
      : if (is_present "pins") {
         : print "Two pins.";
         : done;
      }
   }
   : match "examine pins" {
      : if (is_present "pins") {
         : print "No eyes.";
         : done;
      }
   }
   // Eyes (treasure)
   : match "examine eyes" {
      : if (is_present "needles") {
         : print "Eyes open.";
         : done;
      }
      : if (is_present "eyes") {
         : print "Two eyes.";
         : done;
      }
   }
   : match "get eyes" {
      : if (is_present "needles") {
         : if (carried() < carry_limit()) {
            : swap o1 = "needles" o2 = "pins";
            : pocket "eyes";
            : increment "treasure_found";
            : success;
            : if (is_beside "pins") {
               : set_string var = "message" text = "Igor take.";
               : gosub "refresh";
            }
            : else {
               : print "Igor take.";
               : done;
            }
         }
         : print "Hands full.";
         : done;
      }
   }
   : match "give eyes;show eyes" {
      : if (is_present "frankenstein") {
         : print "\"Take upstairs.\".";
         : done;
      }
   }

   // Room 20: Town Square
   : match "examine square" {
      : if (is_at "room20") {
         : print "Not round.";
         : done;
      }
   }
   : match "examine town" {
      : if (is_at "room20") {
         : print "Around square.";
         : done;
      }
   }

   // Room 21: Road 4
   // See room12 for road
   // Camping store
   : match "examine camping;examine store" {
      : if (is_present "camping_store") {
         : print "To west.";
         : done;
      }
   }
   : match "enter store" {
      : if (is_present "camping_store") {
         : goto "room23";
         : redescribe;
      }
   }
   // Car wash
   : match "examine wash" {
      : if (is_present "wash") {
         : print "To south.";
         : done;
      }
   }
   : match "enter wash" {
      : if (is_present "wash") {
         : goto "room24";
         : redescribe;
      }
   }
   // Gym
   : match "examine gym" {
      : if (is_present "gym") {
         : print "To north.";
         : done;
      }
   }
   : match "enter gym" {
      : if (is_present "gym") {
         : goto "room22";
         : redescribe;
      }
   }

   // Room 22: Gym
   : match "examine gym" {
      : if (is_at "room22") {
         : print "Jim's away.";
         : done;
      }
   }
   : match "exit _" {
      : if (is_at "room22") {
         : goto "room21";
         : redescribe;
      }
   }
   : match "smell _" {
      : if (is_at "room22") {
         : print "Smell sweaty.";
         : done;
      }
   }
   // Bell
   : match "examine bell;get bell" {
      : if (is_at "room22") {
         : print "Which one?";
         : done;
      }
   }
   : match "hit bell;kick bell;hit bar;kick bar;hit dumb;kick dumb;hit kettle;kick kettle" {
      : if (is_present "medicine_ball") {
         : print "Ouch!";
         : done;
      }
   }
   // Bar bell
   : match "examine bar" {
      : if (is_present "bar_bell") {
         : print "Long weight.";
         : done;
      }
   }
   : match "get bar" {
      : if (is_present "bar_bell") {
         : print "Too heavy.";
         : done;
      }
   }
   // Dumb bell
   : match "examine dumb" {
      : if (is_present "dumb_bell") {
         : print "Short weight.";
         : done;
      }
   }
   : match "get dumb" {
      : if (is_present "dumb_bell") {
         : print "Dumb enough.";
         : done;
      }
   }
   // Kettle bell
   : match "examine kettle" {
      : if (is_present "kettle_bell") {
         : print "Round weight.";
         : done;
      }
   }
   : match "get kettle" {
      : if (is_present "kettle_bell") {
         : print "Wanna cuppa?";
         : done;
      }
   }
   // Medicine ball
   : match "examine ball" {
      : if (is_present "medicine_ball") {
         : print "Rolling weight.";
         : done;
      }
   }
   : match "get ball" {
      : if (is_present "medicine_ball") {
         : if (original_noun1() == "medicine") {
            : print "Not sick.";
            : done;
         }
         : print "Too heavy.";
         : done;
      }
   }
   : match "hit ball;kick ball" {
      : if (is_present "medicine_ball") {
         : print "Rolls away.";
         : done;
      }
   }
   // Body builder
   : match "examine builder" {
      : if (is_present "body_builder") {
         : print "Building body.";
         : done;
      }
   }
   : match "ask builder;talk builder" {
      : if (is_present "body_builder") {
         : print "\"Hafta wait.\"";
         : done;
      }
   }
   : match "get builder" {
      : if (is_present "body_builder") {
         : print "He's busy.";
         : done;
      }
   }
   // Builder
   : match "examine builder" {
      : if (is_present "builder") {
         : print "He's resting.";
         : done;
      }
   }
   : match "ask builder;talk builder" {
      : if (is_present "builder") {
         : print "\"Too tired.\"";
         : done;
      }
   }
   // Body (treasure)
   : match "examine body;get body" {
      : if (is_present "body_builder") {
         : print "Not finished.";
         : done;
      }
   }
   : match "examine body" {
      : if (is_present "body") {
         : print "Builder's body.";
         : done;
      }
   }
   : match "give body;show body" {
      : if (is_present "frankenstein") {
         : print "\"Take upstairs.\".";
         : done;
      }
   }
   : match "wait _" {
      : if (is_present "body_builder") {
         : swap o1 = "body_builder" o2 = "builder";
         : create "body";
         : increment "treasure_found";
         : success;
         : set_string var = "message"  text = "Builder finished.";
         : gosub "refresh";
      }
   }

   // Room 23: Camping Store
   : match "examine camping;examine store" {
      : if (is_at "room23") {
         : print "Camping stuff.";
         : done;
      }
   }
   : match "exit _" {
      : if (is_at "room23") {
         : goto "room21";
         : redescribe;
      }
   }
   // Sleeping bag
   : match "examine bag" {
      : if (is_present "sleeping_bag") {
         : print "\"Zzzzz.\"";
         : done;
      }
   }
   : match "get bag" {
      : if (is_present "sleeping_bag") {
         : print "Bag sleeping.";
         : done;
      }
   }
   : match "wake bag" {
      : if (is_present "sleeping_bag") {
         : swap o1 = "sleeping_bag" o2 = "bag";
         : set_string var = "message" text = "Bag wakes.";
         : gosub "refresh";
      }
   }
   // Bag
   : match "examine bag" {
      : if (is_present "bag") {
         : if (is_bag_full) {
            : print "20 pea.";
            : done;
         }
         : print "Bag empty.";
         : done;
      }
   }
   : match "empty bag" {
      : if (is_carried "bag") {
         : if (!is_bag_full) {
            : print "Already empty.";
            : done;
         }
         : create "peas";
         : set_false "is_bag_full";
         : set_string var = "message" text = "Bag empty.";
         : gosub "refresh";
      }
   }
   : match "fill bag" {
      : if (is_carried "bag") {
         : if (is_bag_full) {
            : print "Already full.";
            : done;
         }
         : if (is_beside "peas") {
            : destroy "peas";
            : set_true "is_bag_full";
            : set_string var = "message" text = "Bag full.";
            : gosub "refresh";
         }
      }
   }

   // Room 24: Car Wash
   : match "examine wash" {
      : if (is_at "room24") {
         : print "Very wet.";
         : done;
      }
   }
   : match "exit _" {
      : if (is_at "room24") {
         : goto "room21";
         : redescribe;
      }
   }
   : match "listen -" {
      : if (is_at "room24") {
         : print "Hear water.";
         : done;
      }
   }
   // Wetsuit
   : match "examine wetsuit" {
      : if (is_present "wetsuit") {
         : print "Very wet.";
         : done;
      }
   }
   : match "remove wetsuit" {
      : if (is_worn "wetsuit") {
         : if (is_at "room29") {
            : print "While underwater?";
            : done;
         }
         : if (carried() == carry_limit()) {
            : print "Hands full.";
            : done;
         }
      }
   }
   : match "wear wetsuit" {
      : if (is_carried "wetsuit" && !is_worn "wetsuit") {
         : wear "wetsuit" quiet = "true";
         : print "Nice fit.";
         : done;
      }
   }

   // Room 25: Road 5
   // See room12 for road
   // Aquarium
   : match "examine aquarium" {
      : if (is_present "aquarium") {
         : print "To south.";
         : done;
      }
   }
   : match "enter aquarium" {
      : if (is_present "aquarium") {
         : goto "room28";
         : redescribe;
      }
   }
   // Dry cleaner
   : match "examine cleaner" {
      : if (is_present "cleaner") {
         : print "To north.";
         : done;
      }
   }
   : match "enter cleaner" {
      : if (is_present "cleaner") {
         : goto "room26";
         : redescribe;
      }
   }
   // Railway station
   : match "examine station" {
      : if (is_present "station") {
         : print "To east.";
         : done;
      }
   }
   : match "enter station" {
      : if (is_present "station") {
         : goto "room27";
         : redescribe;
      }
   }

   // Room 26: Dry Cleaner
   // See room12 for sign
   // See room18 for attendant & counter
   : match "examine cleaner" {
      : if (is_at "room26") {
         : if (original_noun1() == "dry") {
            : print "Looks dry.";
            : done;
         }
         : print "Looks clean.";
         : done;
      }
   }
   : match "exit _" {
      : if (is_at "room26") {
         : goto "room25";
         : redescribe;
      }
   }
   // Racks
   : match "examine racks" {
      : if (is_present "racks") {
         : print "Many clothes.";
         : done;
      }
   }
   : match "examine clothes" {
      : if (is_present "racks") {
         : print "Awaiting collection.";
         : done;
      }
   }
   // Suit
   : match "examine suit" {
      : if (is_present "suit") {
         : print "Dry cleaned.";
         : done;
      }
   }
   : match "wear suit" {
      : if (is_carried "suit" && !is_worn "suit") {
         : wear "suit" quiet = "true";
         : print "Nice fit.";
         : done;
      }
   }

   // Room 27: Railway Station
   : match "examine station" {
      : if (is_at "room27") {
         : print "No train.";
         : done;
      }
   }
   : match "exit _" {
      : if (is_at "room27") {
         : goto "room25";
         : redescribe;
      }
   }
   // Receipt
   : match "examine receipt" {
      : if (is_present "receipt") {
         : print "See writing.";
         : done;
      }
   }
   : match "give receipt" {
      : if (is_at "room26" && is_carried "receipt") {
         : create "suit";
         : destroy "receipt";
         : set_string var = "message" text = "Returns suit.";
         : gosub "refresh";
      }
   }
   : match "read receipt" {
      : if (is_present "receipt") {
         : print "\"DRIEST CLEANEST\"";
         : done;
      }
   }

   // Room 28: Aquarium
   : match "examine aquarium" {
      : if (is_at "room28") {
         : print "Something fishy.";
         : done;
      }
   }
   : match "exit _" {
      : if (is_at "room28") {
         : goto "room25";
         : redescribe;
      }
   }
   : match "smell _" {
      : if (is_at "room28") {
         : print "Smell fishy.";
         : done;
      }
   }
   // Fish tank
   : match "examine tank" {
      : if (is_at "room28") {
         : if (is_exists "shark") {
            : print "Shark inside.";
            : done;
         }
         : print "Shark gone.";
         : done;
      }
      : if (is_at "room29") {
         : print "Very fishy.";
         : done;
      }
   }
   : match "d _;enter tank;jump _;swim _;dive _" {
      : if (is_at "room28") {
         : if (!is_worn "wetsuit") {
            : print "Wrong clothing.";
            : failure;
            : done;
         }
         : goto "room29";
         : set_string var = "message" text = "Splash!";
         : gosub "refresh";
      }
   }

   // Room 29: Fish Tank
   : match "u _;exit _" {
      : if (is_at "room29") {
         : if (is_carried "hammer") {
            : print "Too heavy.";
            : done;
         }
         : goto "room28";
         : redescribe;
      }
   }
   : match "swim _;dive _" {
      : if (is_at "room29") {
         : print "Already swimming.";
         : done;
      }
   }
   // Fish
   : match "examine fish" {
      : if (is_at "room28") {
         : print "Inside tank.";
         : done;
      }
      : if (is_at "room29") {
         : print "Red herrings.";
         : done;
      }
   }
   : match "get fish" {
      : if (is_at "room28") {
         : print "Inside tank.";
         : done;
      }
   }
   // Shark
   : match "examine shark" {
      : if (is_at "room28") {
         : if (is_exists "shark") {
            : print "Inside tank.";
            : done;
         }
         : print "Shark gone.";
         : done;
      }
      : if (is_present "shark") {
         : print "Hammerhead.";
         : done;
      }
   }
   : match "get shark" {
      : if (is_at "room28") {
         : if (is_exists "shark") {
            : print "Inside tank.";
            : done;
         }
         : print "Shark gone.";
         : done;
      }
   }
   // Hammer
   : match "examine hammer" {
      : if (is_present "shark") {
         : print "Shark part.";
         : done;
      }
      : if (is_present "hammer") {
         : print "Very heavy.";
         : done;
      }
   }
   : match "get hammer" {
      : if (is_present "shark") {
         : if (carried() < carry_limit()) {
            : swap o1 = "shark" o2 = "head";
            : pocket "hammer";
            : increment "treasure_found";
            : success;
            : set_string var = "message" text = "Leaves head.";
            : gosub "refresh";
         }
         : print "Hands full.";
         : done;
      }
   }
   // Head (treasure)
   : match "examine head" {
      : if (is_present "shark") {
         : print "Shark part.";
         : done;
      }
      : if (is_present "head") {
         : print "Shark's head.";
         : done;
      }
   }
   : match "get head" {
      : if (is_present "shark") {
         : if (carried() < carry_limit()) {
            : swap o1 = "shark" o2 = "hammer";
            : pocket "head";
            : increment "treasure_found";
            : success;
            : set_string var = "message" text = "Leaves hammer.";
            : gosub "refresh";
         }
         : print "Hands full.";
         : done;
      }
   }
   : match "give head;show head" {
      : if (is_present "frankenstein") {
         : print "\"Take upstairs.\".";
         : done;
      }
   }

   // Room 30: Road 6
   // See room12 for road
   // Mayor's house
   : match "examine mayor" {
      : if (is_at "room30") {
         : print "Not home.";
         : done;
      }
   }
   : match "examine house" {
      : if (is_at "room30") {
         : print "Not mare's.";
         : done;
      }
   }
   : match "enter house" {
      : if (is_present "house") {
         : print "Door closed.";
         : done;
      }
   }
   // Door
   : match "examine door" {
      : if (is_present "front_door") {
         : print "Door closed.";
         : done;
      }
   }
   : match "close door" {
      : if (is_present "front_door") {
         : print "Already closed.";
         : done;
      }
   }
   : match "hit door" {
      : if (is_present "front_door") {
         : print "Hurt hand.";
         : done;
      }
   }
   : match "kick door" {
      : if (is_present "front_door") {
         : print "Hurt foot.";
         : done;
      }
   }
   : match "knock door" {
      : if (is_present "front_door") {
         : print "No answer.";
         : done;
      }
   }
   : match "lock door" {
      : if (is_present "front_door") {
         : print "Already locked.";
         : done;
      }
   }
   : match "open door" {
      : if (is_present "front_door") {
         : print "Door locked.";
         : done;
      }
   }
   : match "pick lock" {
      : if (is_present "front_door") {
         : print "Try nose.";
         : done;
      }
   }
   : match "pick nose" {
      : print "Oooh, gross!";
      : done;
   }
   : match "unlock door" {
      : if (is_present "front_door") {
         : print "Need key.";
         : done;
      }
   }
   // Mat
   : match "examine mat" {
      : if (is_present "mat") {
         : print "Got hole.";
         : done;
      }
   }
   : match "examine hole" {
      : if (is_present "mat") {
         : print "Oblong hole.";
         : done;
      }
   }
   : match "get mat" {
      : if (is_present "mat") {
         : print "Mayor's mat.";
         : done;
      }
   }
   : match "move mat;turn mat;lift mat" {
      : if (is_present "mat") {
         : print "No key.";
         : done;
      }
   }
   : match "sew mat;repair mat" {
      : if (is_present "mat") {
         : print {("Can't " + original_verb() + ".")}
         : done;
      }
   }
   // Meat
   : match "examine meat" {
      : if (is_present "meat") {
         : print "Dog food.";
         : done;
      }
   }
   : match "eat meat" {
      : if (is_present "meat") {
         : print "Igor vegetarian.";
         : done;
         
      }
   }
   : match "give meat;show meat" {
      : if (is_present "horse" && is_carried "meat") {
         : print "Prefer apple.";
         : done;
      }
   }
   : match "show meat" {
      : if (is_present "dog" && is_carried "meat") {
         : print "Wags tail.";
         : done;
      }
   }
   : match "smell meat" {
      : if (is_present "meat") {
         : print "Smell off.";
         : done;
      }
   }
   : match "drop meat;give meat" {
      : if (is_present "dog" && is_carried "meat") {
         : destroy "meat";
         : set_true "has_fed_dog";
         : set_string var = "dog_name" text = "friendly dog";
         : set_string var = "message" text = "Gobbles meat.";
         : gosub "refresh";
      }
   }

   // Room 31: Laboratory
   // See room02 for rope
   : match "examine laboratory" {
      : if (is_at "room31") {
         : print "Frankenstein's lab.";
         : done;
      }
   }
   // Bench
   : match "examine bench" {
      : if (is_present "bench") {
         : print "For experiments.";
         : done;
      }
   }
   // Machinery
   : match "examine machinery" {
      : if (is_present "machinery") {
         : print "Very complicated.";
         : done;
      }
   }

   // Miscellaneous: Singular vs plural disambiguation
   : match "_ arm" {
      : if ((is_present "crest" && has_not_created "arms") || is_present "arms") {
         : print "Try ARMS.";
         : done;
      }
   }
   : match "_ ear" {
      : if ((is_present "corn" && has_not_created "ears") || is_present "ears") {
         : print "Try EARS.";
         : done;
      }
   }
   : match "_ eye" {
      : if ((is_present "needles" && has_not_created "eyes") || is_present "eyes") {
         : print "Try EYES.";
         : done;
      }
   }
   : match "_ foot" {
      : if ((is_present "rulers" && has_not_created "feet") || is_present "feet") {
         : print "Try FEET.";
         : done;
      }
   }
   : match "_ hand" {
      : if ((is_present "clock" && has_not_created "hands") || is_present "hands") {
         : print "Try HANDS.";
         : done;
      }
   }
   : match "_ leg" {
      : if ((is_present "table" && has_not_created "legs") || is_present "legs") {
         : print "Try LEGS.";
         : done;
      }
   }
   : match "_ needle" {
      : if (is_present "needles") {
         : print "Try NEEDLES.";
         : done;
      }
   }
   : match "_ pea" {
      : if (is_present "peas") {
         : print "Try PEAS.";
         : done;
      }
   }
   : match "_ pin" {
      : if (is_present "pins") {
         : print "Try PINS.";
         : done;
      }
   }
   : match "_ rack" {
      : if (is_present "racks") {
         : print "Try RACKS.";
         : done;
      }
   }
   : match "_ ruler" {
      : if (is_present "rulers") {
         : print "Try RULERS.";
         : done;
      }
   }

   // Miscellaneous commands
   : match "ask -" {
      : print {(camel(original_verb()) + " who?")}
      : done;
   }
   : match "ask *" {
      : if (is_present (s1())) {
         : print "No response.";
         : done;
      }
   }
   : match "attack -" {
      : print {(camel(original_verb()) + " who?")}
      : done;
   }
   : match "attack *" {
      : if (is_present (s1())) {
         : print "Too risky.";
         : done;
      }
   }
   : match "chop -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "chop *" {
      : if (is_present (s1())) {
         : print "No axe.";
         : done;
      }
   }
   : match "close -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "close *" {
      : if (is_present (s1())) {
         : print {("Can't " + original_verb() + ".")}
         : done;
      }
   }
   : match "cut -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "cut *" {
      : if (is_present (s1())) {
         : print "No knife.";
         : done;
      }
   }
   : match "dance -" {
      : print "Igor dance.";
      : done;
   }
   : match "dig -" {
      : if (is_carried "spade") {
         : print "Ground hard.";
         : done;
      }
      : print "Need shovel.";
      : done;
   }
   : match "dig *" {
      : if (is_present (s1())) {
         : if (is_carried "spade") {
            : print "Too hard.";
            : done;
         }
         : print "Need shovel.";
         : done;
      }
   }
   : match "drink -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "drink *" {
      : if (is_present (s1())) {
         : print "Not drinkable.";
         : done;
      }
   }
   : match "drop -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "drop *" {
      : if (is_carried (s1()) && !is_worn (s1())) {
         : drop quiet = "true";
         : set_string var = "message" text = "Igor drop.";
         : gosub "refresh";
      }
   }
   : match "eat -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "eat *" {
      : if (is_present (s1())) {
         : print "Give indigestion.";
         : done;
      }
   }
   : match "examine -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "get -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "get *" {
      : if (is_beside (s1())) {
         : get quiet = "true";
         : set_string var = "message" text = "Igor take.";
         : gosub "refresh";
      }
   }
   : match "give -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "give *" {
      : if (is_worn (s1())) {
         : print "Remove first.";
         : done;
      }
      : if (is_carried (s1())) {
         : print "Nobody want.";
         : done;
      }
   }
   : match "help -" {
      : print "Help Frankenstein.";
      : done;
   }
   : match "help *" {
      : print "No help.";
      : done;
   }
   : match "hit -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "hit *" {
      : if (is_present (s1())) {
         : print "Hurt hand.";
         : done;
      }
   }
   : match "kick -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "kick *" {
      : if (is_present (s1())) {
         : print "Hurt foot.";
         : done;
      }
   }
   : match "kiss -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "kiss *" {
      : if (is_present (s1())) {
         : print "No way!";
         : done;
      }
   }
   : match "insert -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "insert *" {
      : if (is_carried (s1())) {
         : print "No container.";
         : done;
      }
   }
   : match "jump -" {
      : print "Boing, boing.";
      : done;
   }
   : match "knock -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "knock *" {
      : if (is_present (s1())) {
         : print "Knock, knock.";
         : done;
      }
   }
   : match "listen -" {
      : print "All quiet.";
      : done;
   }
   : match "move -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "move *" {
      : if (is_present (s1())) {
         : print "Won't budge.";
         : done;
      }
   }
   : match "open -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "open *" {
      : if (is_present (s1())) {
         : print {("Can't " + original_verb() + ".")}
         : done;
      }
   }
   : match "pat -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "pat *" {
      : if (is_present (s1())) {
         : print "No response.";
         : done;
      }
   }
   : match "pick -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "pick *" {
      : if (is_present (s1())) {
         : print "Can't pick.";
         : done;
      }
   }
   : match "plant -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "plant *" {
      : if (is_present (s1())) {
         : if (!is_at "room08") {
            : print "No dirt.";
            : done;
         }
         : print "Need bean.";
         : done;
      }
   }
   : match "play -" {
      : print "Not child.";
      : done;
   }
   : match "play *" {
      : if (is_present (s1())) {
         : print "Can't play.";
         : done;
      }
   }
   : match "pray -" {
      : print "\"Dear God.\"";
      : done;
   }
   : match "pull -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "pull *" {
      : if (is_present (s1())) {
         : print "Won't budge.";
         : done;
      }
   }
   : match "read -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "read *" {
      : if (is_present (s1())) {
         : print "Nothing legible.";
         : done;
      }
   }
   : match "remove -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   // : match "remove *" uses system remove
   : match "repair -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "repair *" {
      : if (is_present (s1())) {
         : print "Not broken.";
         : done;
      }
   }
   : match "ride -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "ride *" {
      : if (is_present (s1())) {
         : print {("Can't " + original_verb() + ".")}
         : done;
      }
   }
   : match "saw -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "saw *" {
      : if (is_present (s1())) {
         : if (!is_carried "saw") {
            : print "No saw.";
            : done;
         }
         : print "Can't saw.";
         : done;
      }
   }
   : match "say -" {
      : print "\"Mumble, mumble.\"";
      : done;
   }
   : match "say *" {
      : print {("\"" + camel(original_noun1()) + ".\"")}
      : done;
   }
   : match "scream -" {
      : print "\"Yaaah!\"";
      : done;
   }
   : match "search -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "search *" {
      : if (is_present (s1())) {
         : print "Find nothing.";
         : done;
      }
   }
   : match "sew -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "sew *" {
      : if (is_carried(s1())) {
         : print "Too clumsy.";
         : done;
      }
   }
   : match "show -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "show *" {
      : if (is_carried(s1())) {
         : print "Nobody interested.";
         : done;
      }
   }
   : match "sing _" {
      : print "Only grunt.";
      : done;
   }
   : match "sit _;sit down" {
      : print "Rest later.";
      : done;
   }
   : match "sleep _" {
      : print "Not sleepy.";
      : done;
   }
   : match "smell -" {
      : print "Sniff, sniff.";
      : done;
   }
   : match "smell *" {
      : if (is_present (s1())) {
         : print "Smell normal.";
         : done;
      }
   }
   : match "swim _" {
      : print "No water.";
      : done;
   }
   : match "talk -" {
      : print "\"Yack, yack.\"";
      : done;
   }
   : match "talk *" {
      : if (is_present (s1())) {
         : print "No response.";
         : done;
      }
   }
   : match "think _" {
      : print "Brain hurt.";
      : done;
   }
   : match "touch -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "touch *" {
      : if (is_present (s1())) {
         : print "Feels normal.";
         : done;
      }
   }
   : match "use -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "use *" {
      : if (is_present (s1())) {
         : print "More specific.";
         : done;
      }
   }
   : match "wait -" {
      : print "Time passes...";
      : done;
   }
   : match "wake -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   : match "wake *" {
      : if (is_present (s1())) {
         : print "Not asleep.";
         : done;
      }
   }
   : match "wear -" {
      : print {(camel(original_verb()) + " what?")}
      : done;
   }
   // : match "wear *" uses system wear
   : match "xyzzy -" {
      : print "Wrong adventure.";
      : done;
   }

   // Meta commands
   : match "about -;credits -;info -" {
      : decrement "turns";
      : gosub "version";
      : press_any_key;
      : stagger "Written for Adventuron Treasure Hunt Jam, 6 February to 5 March 2020. Rules defined at <https://itch.io/jam/treasure-hunt<#f3f>>[https://itch.io/jam/treasure-hunt].\nAdventuron written by <Chris Ainsley<#99f>>.\nGame design, coding and graphics by <Garry Francis<#99f>>.\nPublic domain Royalati font by <Brendan Raftery<#99f>>.\nPlay testing by <Chris Ainsley<#99f>> and <Lionel Ange<#99f>>. Thank you both!";
      : done;
   }
   : match "inventory -" {
      : decrement "turns";
      : inventory;
   }
   : match "restore -" {
      : decrement "turns";
      : load;
   }
   : match "look -" {
      : decrement "turns";
      : redescribe;
   }
   : match "save -" {
      : decrement "turns";
      : save;
   }
   : match "score -"  {
      : decrement "turns";
      : print {("Score: " + treasure_found * 5 + treasure_deposited() * 5)}
      : done;
   }
   : match "turns -"  {
      : decrement "turns";
      : print {("Turns: " + turns)}
      : done;
   }
   : match "version -" {
      : decrement "turns";
      : gosub subroutine = "version";
      : done;
   }
}

######################################
#  On Pre Describe
######################################
on_pre_describe {
   // Floating objects in alphabetical order
   // Attendant
   : if (is_just_entered() && (is_at "room18" || is_at "room26")) {
      : create "attendant";
   }
   // Counter
   : if (is_just_entered() && (is_at "room18" || is_at "room26")) {
      : create "counter";
   }
   // Courtyard
   : if (is_just_entered() && (is_at "room05" || is_at "room07")) {
      : create "courtyard";
   }
   // Door
   : if (is_just_entered() && (is_at "room01" || is_at "room04")) {
      : create "door";
   }
   // Gate
   : if (is_just_entered() && (is_at "room05" || is_at "room11")) {
      : create "gate";
   }
   // Road
   : if (is_just_entered() && (is_at "room12" || is_at "room14" || is_at "room17" || is_at "room21" || is_at "room25" || is_at "room30")) {
      : create "road";
   }
   // Rope
   : if (is_just_entered() && (is_at "room02" || is_at "room31")) {
      : create "rope";
   }
   // Sign
   : if (is_just_entered() && (is_at "room12" || is_at "room26")) {
      : create "sign";
   }
}

######################################
#  On Describe
######################################
on_describe {
   : if (is_refresh) {
      : set_false "is_refresh";
      : print {(message)};
   }
   : if (is_just_entered() && is_at "room24") {
      : print "Water sprays.";
      : if (is_carried "suit") {
         : swap o1 = "suit" o2 = "wetsuit";
         : print "Suit wet.";
      }
      : done;
   }
}

######################################
#  On Tick
######################################
on_tick {
   : increment "turns";
   : if (is_just_entered() && turns == 1) {
      : print "Type ABOUT.";
   }
   : if (is_at "room31" && treasure_dropped < treasure_deposited()) {
      : success;
   }
   : set_integer var = "treasure_dropped" {( treasure_deposited())};
   : if (treasure_deposited() == treasure_total()) {
      : set_true "has_all_treasures";
      : if (!is_end_game) {
         : set_true "is_end_game";
      }
   }
   : else {
      : set_false "has_all_treasures";
      : set_false "is_end_game";
   }
}

// on_debug {
//    : goto "room31";
//    : create "head";
//    : create "hair";
//    : create "ears";
//    : create "eyes";
//    : create "body";
//    : create "arms";
//    : create "legs";
//    : create "hands";
//    : create "feet";
// }
######################################
#  Vocabulary
######################################
vocabulary {
   // Verbs
   : verb / aliases = [ask, answer, question, tell]
   : verb / aliases = [attack, destroy, fight, kill, murder, punch, thump]
   : verb / aliases = [break, bash, crack, crash, hit, smash, snap, strike]
   : verb / aliases = [close, shut]
   : verb / aliases = [cut, slice]
   : verb / aliases = [drink, sip, swallow]
   : verb / aliases = [drop, discard, chuck, throw, toss]
   : verb / aliases = [eat, consume, taste]
   : verb / aliases = [examine, check, describe, inspect, watch, x]
   : verb / aliases = [get, carry, hold, purloin, steal, take]
   : verb / aliases = [give, offer]
   : verb / aliases = [go, run, walk]
   : verb / aliases = [groom, pat, pet, stroke]
   : verb / aliases = [insert, place, put, replace]
   : verb / aliases = [kiss, caress, embrace, hug]
   : verb / aliases = [knock, rap, tap]
   : verb / aliases = [jump, hop, skip]
   : verb / aliases = [lie, sit]
   : verb / aliases = [listen, hear]
   : verb / aliases = [load, restore]
   : verb / aliases = [move, shift, push, force, heave, press, shove]
   : verb / aliases = [plant, sow]
   : verb / aliases = [pull, drag]
   : verb / aliases = [quit, q]
   : verb / aliases = [read, browse, scan]
   : verb / aliases = [repair, fix, mend]
   : verb / aliases = [remove, disrobe, doff, shed]
   : verb / aliases = [ride, mount]
   : verb / aliases = [say, utter]
   : verb / aliases = [scream, holler, shout, yell]
   : verb / aliases = [sew, build, construct, make]
   : verb / aliases = [show, display, present]
   : verb / aliases = [sleep, nap, snooze]
   : verb / aliases = [smell, sniff]
   : verb / aliases = [swim, dive]
   : verb / aliases = [talk, speak]
   : verb / aliases = [touch, feel, fondle, grope]
   : verb / aliases = [wait, z]
   : verb / aliases = [wake, arouse, awake, rouse]
   : verb / aliases = [wear, don]
   : verb / aliases = [xyzzy, abracadabra, plover, plugh, sesame, yoho]

   // Nouns
   : noun / aliases = [bell, weight]
   : noun / aliases = [bar, barbell]
   : noun / aliases = [car, wash]
   : noun / aliases = [crest, family]
   : noun / aliases = [doctor, dr, frankenstein]
   : noun / aliases = [dry, cleaner]
   : noun / aliases = [dumb, dumbell, dumbbell]
   : noun / aliases = [horse, mare]
   : noun / aliases = [hour, little, small]
   : noun / aliases = [kettle, kettlebell]
   : noun / aliases = [lab, laboratory]
   : noun / aliases = [living, room]
   : noun / aliases = [me, myself, self, igor]
   : noun / aliases = [medicine, ball]
   : noun / aliases = [minute, big, large]
   : noun / aliases = [money, 10p, 10pea, 20p, 20pea, 30p, 30pea, 50p, 50pea]
   : noun / aliases = [railway, station]
   : noun / aliases = [roadside, stall]
   : noun / aliases = [shark, hammerhead]
   : noun / aliases = [spade, shovel]
   : noun / aliases = [vege, vegetable, patch]
   : noun / aliases = [village, outskirts]
}

######################################
#  Subroutines
######################################
subroutines {
   refresh : subroutine {
      : set_true "is_refresh";
      : redescribe;
   }
   // Old MacDonald in C major played at 200 bpm
   play_macdonald : subroutine {
      // Bar 1
      : beep millis = "150" pitch = "0";
      : pause "150";
      : beep millis = "150" pitch = "0";
      : pause "150";
      : beep millis = "150" pitch = "0";
      : pause "150";
      : beep millis = "150" pitch = "-5";
      : pause "150";
      // Bar 2
      : beep millis = "150" pitch = "-3";
      : pause "150";
      : beep millis = "150" pitch = "-3";
      : pause "150";
      : beep millis = "300" pitch = "-5";
      : pause "300";
      // Bar 3
      : beep millis = "150" pitch = "4";
      : pause "150";
      : beep millis = "150" pitch = "4";
      : pause "150";
      : beep millis = "150" pitch = "2";
      : pause "150";
      : beep millis = "150" pitch = "2";
      : pause "150";
      // Bar 4
      : beep millis = "450" pitch = "0";
      : pause "450";
      : beep millis = "150" pitch = "-5";
      : pause "150";
      // Bar 5
      : beep millis = "150" pitch = "0";
      : pause "150";
      : beep millis = "150" pitch = "0";
      : pause "150";
      : beep millis = "150" pitch = "0";
      : pause "150";
      : beep millis = "150" pitch = "-5";
      : pause "150";
      // Bar 6
      : beep millis = "150" pitch = "-3";
      : pause "150";
      : beep millis = "150" pitch = "-3";
      : pause "150";
      : beep millis = "300" pitch = "-5";
      : pause "300";
      // Bar 7
      : beep millis = "150" pitch = "4";
      : pause "150";
      : beep millis = "150" pitch = "4";
      : pause "150";
      : beep millis = "150" pitch = "2";
      : pause "150";
      : beep millis = "150" pitch = "2";
      : pause "150";
      // Bar 8
      : beep millis = "450" pitch = "0";
   }
   play_macdonald_broken : subroutine {
      // Bar 1
      : beep millis = "150" pitch = "0";
      : pause "150";
      : beep millis = "150" pitch = "0";
      : pause "150";
      : beep millis = "150" pitch = "0";
      : pause "150";
      : beep millis = "150" pitch = "-5";
      : pause "150";
      // Bar 2
      : beep millis = "150" pitch = "-3";
      : pause "150";
      : beep millis = "150" pitch = "-3";
      : pause "150";
      : beep millis = "300" pitch = "-5";
      : pause "300";
      // Bar 3
      : pause "600";
      : beep millis = "150" pitch = "2";
      : pause "150";
      : beep millis = "150" pitch = "2";
      : pause "150";
      // Bar 4
      : beep millis = "450" pitch = "0";
      : pause "450";
      : beep millis = "150" pitch = "-5";
      : pause "150";
      // Bar 5
      : beep millis = "150" pitch = "0";
      : pause "150";
      : beep millis = "150" pitch = "0";
      : pause "150";
      : beep millis = "150" pitch = "0";
      : pause "150";
      : beep millis = "150" pitch = "-5";
      : pause "150";
      // Bar 6
      : beep millis = "150" pitch = "-3";
      : pause "150";
      : beep millis = "150" pitch = "-3";
      : pause "150";
      : beep millis = "300" pitch = "-5";
      : pause "300";
      // Bar 7
      : pause "600";
      : beep millis = "150" pitch = "2";
      : pause "150";
      : beep millis = "150" pitch = "2";
      : pause "150";
      // Bar 8
      : beep millis = "450" pitch = "0";
   }
   // Baa Baa Black Sheep in C major played at 150 bpm
   play_sheep : subroutine {
      // Bar 1
      : beep millis = "200"  pitch = "0";
      : pause "200";
      : beep millis = "200"  pitch = "0";
      : pause "200";
      : beep millis = "200"  pitch = "7";
      : pause "200";
      : beep millis = "200"  pitch = "7";
      : pause "200";
      // Bar 2
      : beep millis = "100"  pitch = "9";
      : pause "100";
      : beep millis = "100"  pitch = "11";
      : pause "100";
      : beep millis = "100"  pitch = "12";
      : pause "100";
      : beep millis = "100"  pitch = "9";
      : pause "100";
      : beep millis = "400"  pitch = "7";
      : pause "400";
      // Bar 3
      : beep millis = "200"  pitch = "5";
      : pause "200";
      : beep millis = "200"  pitch = "5";
      : pause "200";
      : beep millis = "200"  pitch = "4";
      : pause "200";
      : beep millis = "200"  pitch = "4";
      : pause "200";
      // Bar 4
      : beep millis = "200"  pitch = "2";
      : pause "200";
      : beep millis = "200"  pitch = "2";
      : pause "200";
      : beep millis = "400"  pitch = "0";
      : pause "400";
      // Bar 5
      : beep millis = "200"  pitch = "7";
      : pause "200";
      : beep millis = "100"  pitch = "7";
      : pause "100";
      : beep millis = "100"  pitch = "7";
      : pause "100";
      : beep millis = "200"  pitch = "5";
      : pause "200";
      : beep millis = "200"  pitch = "5";
      : pause "200";
      // Bar 6
      : beep millis = "200"  pitch = "4";
      : pause "200";
      : beep millis = "100"  pitch = "4";
      : pause "100";
      : beep millis = "100"  pitch = "4";
      : pause "100";
      : beep millis = "400"  pitch = "2";
      : pause "400";
      // Bar 7
      : beep millis = "200"  pitch = "7";
      : pause "200";
      : beep millis = "100"  pitch = "7";
      : pause "100";
      : beep millis = "100"  pitch = "7";
      : pause "100";
      : beep millis = "100"  pitch = "5";
      : pause "100";
      : beep millis = "100"  pitch = "7";
      : pause "100";
      : beep millis = "100"  pitch = "9";
      : pause "100";
      : beep millis = "100"  pitch = "5";
      : pause "100";
      // Bar 8
      : beep millis = "200"  pitch = "4";
      : pause "200";
      : beep millis = "100"  pitch = "2";
      : pause "100";
      : beep millis = "100"  pitch = "2";
      : pause "100";
      : beep millis = "400"  pitch = "0";
   }
   play_sheep_broken : subroutine {
      // Bar 1
      : beep millis = "200"  pitch = "0";
      : pause "200";
      : beep millis = "200"  pitch = "0";
      : pause "200";
      : beep millis = "200"  pitch = "7";
      : pause "200";
      : beep millis = "200"  pitch = "7";
      : pause "200";
      // Bar 2
      : beep millis = "100"  pitch = "9";
      : pause "100";
      : beep millis = "100"  pitch = "11";
      : pause "100";
      : beep millis = "100"  pitch = "12";
      : pause "100";
      : beep millis = "100"  pitch = "9";
      : pause "100";
      : beep millis = "400"  pitch = "7";
      : pause "400";
      // Bar 3
      : beep millis = "200"  pitch = "5";
      : pause "200";
      : beep millis = "200"  pitch = "5";
      : pause "200";
      : pause "800";
      // Bar 4
      : beep millis = "200"  pitch = "2";
      : pause "200";
      : beep millis = "200"  pitch = "2";
      : pause "200";
      : beep millis = "400"  pitch = "0";
      : pause "400";
      // Bar 5
      : beep millis = "200"  pitch = "7";
      : pause "200";
      : beep millis = "100"  pitch = "7";
      : pause "100";
      : beep millis = "100"  pitch = "7";
      : pause "100";
      : beep millis = "200"  pitch = "5";
      : pause "200";
      : beep millis = "200"  pitch = "5";
      : pause "200";
      // Bar 6
      : pause "800";
      : beep millis = "400"  pitch = "2";
      : pause "400";
      // Bar 7
      : beep millis = "200"  pitch = "7";
      : pause "200";
      : beep millis = "100"  pitch = "7";
      : pause "100";
      : beep millis = "100"  pitch = "7";
      : pause "100";
      : beep millis = "100"  pitch = "5";
      : pause "100";
      : beep millis = "100"  pitch = "7";
      : pause "100";
      : beep millis = "100"  pitch = "9";
      : pause "100";
      : beep millis = "100"  pitch = "5";
      : pause "100";
      // Bar 8
      : pause "400";
      : beep millis = "100"  pitch = "2";
      : pause "100";
      : beep millis = "100"  pitch = "2";
      : pause "100";
      : beep millis = "400"  pitch = "0";
   }
   // Mary had a Little Lamb in C major played at 200 bpm
   play_mary : subroutine {
      // Bar 1
      : beep millis = "150"  pitch = "4";
      : pause "150";
      : beep millis = "150"  pitch = "2";
      : pause "150";
      : beep millis = "150"  pitch = "0";
      : pause "150";
      : beep millis = "150"  pitch = "2";
      : pause "150";
      // Bar 2
      : beep millis = "150"  pitch = "4";
      : pause "150";
      : beep millis = "150"  pitch = "4";
      : pause "150";
      : beep millis = "300"  pitch = "4";
      : pause "300";
      // Bar 3
      : beep millis = "150"  pitch = "2";
      : pause "150";
      : beep millis = "150"  pitch = "2";
      : pause "150";
      : beep millis = "300"  pitch = "2";
      : pause "300";
      // Bar 4
      : beep millis = "150"  pitch = "4";
      : pause "150";
      : beep millis = "150"  pitch = "7";
      : pause "150";
      : beep millis = "300"  pitch = "7";
      : pause "300";
      // Bar 5
      : beep millis = "150"  pitch = "4";
      : pause "150";
      : beep millis = "150"  pitch = "2";
      : pause "150";
      : beep millis = "150"  pitch = "0";
      : pause "150";
      : beep millis = "150"  pitch = "2";
      : pause "150";
      // Bar 6
      : beep millis = "150"  pitch = "4";
      : pause "150";
      : beep millis = "150"  pitch = "4";
      : pause "150";
      : beep millis = "150"  pitch = "4";
      : pause "150";
      : beep millis = "150"  pitch = "4";
      : pause "150";
      // Bar 7
      : beep millis = "150"  pitch = "2";
      : pause "150";
      : beep millis = "150"  pitch = "2";
      : pause "150";
      : beep millis = "150"  pitch = "4";
      : pause "150";
      : beep millis = "150"  pitch = "2";
      : pause "150";
      // Bar 8
      : beep millis = "600"  pitch = "0";
   }
   play_mary_broken : subroutine {
      // Bar 1
      : pause "300";
      : beep millis = "150"  pitch = "2";
      : pause "150";
      : beep millis = "150"  pitch = "0";
      : pause "150";
      : beep millis = "150"  pitch = "2";
      : pause "150";
      // Bar 2
      : pause "1200";
      // Bar 3
      : beep millis = "150"  pitch = "2";
      : pause "150";
      : beep millis = "150"  pitch = "2";
      : pause "150";
      : beep millis = "300"  pitch = "2";
      : pause "300";
      // Bar 4
      : pause "300";
      : beep millis = "150"  pitch = "7";
      : pause "150";
      : beep millis = "300"  pitch = "7";
      : pause "300";
      // Bar 5
      : pause "300";
      : beep millis = "150"  pitch = "2";
      : pause "150";
      : beep millis = "150"  pitch = "0";
      : pause "150";
      : beep millis = "150"  pitch = "2";
      : pause "150";
      // Bar 6
      : pause "1200";
      // Bar 7
      : beep millis = "150"  pitch = "2";
      : pause "150";
      : beep millis = "150"  pitch = "2";
      : pause "450";
      : beep millis = "150"  pitch = "2";
      : pause "150";
      // Bar 8
      : beep millis = "600"  pitch = "0";
   }
   version : subroutine {
      : print "^n^Igor's Quest\nVersion 1.0.0\nCopyright © 2020 Garry Francis\nCompiled with Adventuron version 1.0.0 Beta 27g^m^";
      : return;
   }
}

######################################
#  Themes
######################################
themes {
   my_theme : theme {
      extends = two
      colors {
         exit_list_header_pen = #99f
         inventory_header_pen = #99f
         status_bar_paper = #336
         status_bar_pen = 15
         yousee_header_pen = #99f
         prompt_pen = 15
         textbox_pen = #f3f
      }
      lister_exits {
         exit_list_capitalization = lower
         experimental_enable_direction_arrows = false
         is_show_blocked_exits = false
      }
      lister_inventory {
         list_type = single_line_no_article
      }
      lister_objects {
         list_type = single_line_no_article
      }
      screen {
         paragraph_spacing_multiplier = 0.5
         status_bar_padding_bottom = 2
      }
      theme_settings {
         capitalization = original
         font = userfont_royalati
         header_capitalization = original
         layout = SB X O SEP "my_sep" EXPERIMENTALLOCK
         layout_mobile = SB X O SEP "adv_line_purple"
         shader = none
         wingame_jingle = on
      }
      system_messages {
         object_list_header = "Igor see: "
         exit_list_header_concise = "Igor go: "
         i_cant_do_that = "Igor can't."
         unknown_noun = "Not understand."
         unknown_verb = "Not understand."
         you_cant_go_that_direction = "Can't go."
         inventory_list_header = "Igor carry: "
         inventory_list_empty = "nothing"
         you_see_nothing_special = "Nothing special."
         on_get = "Igor take."
         on_drop = "Igor drop."
         on_wear = "Igor wear."
         on_remove = "Igor remove."
         you_are_already_carrying = "Already got."
         dont_have_one_of_those = "Don't have."
         ask_quit = "You finish?"
         post_quit = "Okay."
         cant_take = "Can't take."
         prompt = ">>"
         cant_see_one_of_those = "Can't see."
         not_present = "Not here."
         nothing_to_get = "Not here."
         restore_from_autosave = "Rollback?"
         you_already_wear = "Already wear."
         must_remove_first = "Remove first."
         it_is_dark = "It's dark."
         worn_suffix = " (worn)"
         cannot_carry_any_more = "Hands full."
      }
   }
}

######################################
#  Assets
######################################
assets {
   separators {
      my_sep : separator tile = "tile" horz_pixels = "8";
   }
   graphics {
      tile : base64_png "iVBORw0KGgoAAAANSUhEUgAAAAgAAAAIAQMAAAD+wSzIAAAAA3NCSVQICAjb4U/gAAAABlBMVEX///8zM2YjVSnqAAAAAnRSTlMA/1uRIrUAAAAJcEhZcwAADnQAAA50AWsks9YAAAAldEVYdFNvZnR3YXJlAE1hY3JvbWVkaWEgRmlyZXdvcmtzIE1YIDIwMDSHdqzPAAAAFnRFWHRDcmVhdGlvbiBUaW1lADAyLzA0LzIwNBYDnAAAABhJREFUeJxj+M/QwLCPYRHDCob1DAoM/wEsvwVWEIW3hAAAAABJRU5ErkJggg==";
      title_screen : base64_png "";
   }
   fonts {
      userfont_royalati : base64_ttf horz_pixels = "8" vert_pixels = "8" font_scale_multiplier = "1.5" experimental_line_height_ratio = "1" snap_vert = "true" "";
   }
}